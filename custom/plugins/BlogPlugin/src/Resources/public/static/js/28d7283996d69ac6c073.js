"use strict";(window["webpackJsonpPluginblog-plugin"]=window["webpackJsonpPluginblog-plugin"]||[]).push([[853],{853:function(e,t,o){o.r(t),o.d(t,{default:function(){return i}});let{Mixin:a}=Shopware,{Criteria:l}=Shopware.Data;var i={template:'{% block sw_blog_detail %}\n	<sw-page class="sw-blog-detail">\n		{% block sw_product_list_language_switch %}\n			<template #language-switch>\n				<sw-language-switch\n					:disabled="blogId == null || undefined"\n					:save-changes-function="saveOnLanguageChange"\n					:abort-change-function="abortOnLanguageChange"\n					@on-change="onChangeLanguage"\n				/>\n			</template>\n		{% endblock %}\n		<template #smart-bar-actions>\n			<sw-button :router-link="{name: \'sw.blog.index\'}">\n				{{$tc(\'sw-blog.general.cancel\')}}\n			</sw-button>\n			<sw-button-process :isloading="isLoading" :processsuccess="processSuccess" variant="primary" @process-finish="saveFinish" @click="onClickSave">\n				{{$tc(\'sw-blog.general.save\')}}\n			</sw-button-process>\n		</template>\n		<template #content>\n			<sw-card-view>\n				<sw-card v-if="blog">\n					<sw-text-field v-model:value="blog.name" :placeholder="$tc(\'sw-blog.detail.placeholderName\')" :label="$tc(\'sw-blog.detail.labelName\')" name="name" validation="required" required :error="blogCategoryNameError"/>\n\n					<sw-textarea-field v-model:value="blog.description" :placeholder="$tc(\'sw-blog.detail.placeholderDescription\')" :label="$tc(\'sw-blog.detail.labelDescription\')" name="name" validation="required" required :error="blogCategoryDescriptionError"></sw-textarea-field>\n\n					<sw-entity-multi-select\n						:label="$tc(\'sw-blog.detail.labelBlogCategory\')" \n						:placeholder="$tc(\'sw-blog.detail.placeholderBlogCategory\')"\n						entity-name="blog_category"\n						v-model:entityCollection="blog.blogCategories"\n						>\n					</sw-entity-multi-select>\n\n					<sw-entity-multi-select\n						:label="$tc(\'sw-blog.detail.labelProduct\')"\n						:placeholder="$tc(\'sw-blog.detail.placeholderProduct\')"\n						entity-name="product"\n						v-model:entityCollection="blog.products"\n						>\n					</sw-entity-multi-select>\n\n					<sw-text-field\n					v-model:value="blog.author" :placeholder="$tc(\'sw-blog.detail.placeholderAuthor\')" :label="$tc(\'sw-blog.detail.labelAuthor\')" name="author" validation="required" required :error="blogCategoryAuthorError"/>\n\n					<sw-datepicker v-model:value="blog.releaseDate" :label="$tc(\'sw-blog.detail.labelReleaseDate\')" name="release_date" required :error="blogCategoryReleaseDateError"></sw-datepicker>\n\n					<sw-switch-field :label="$tc(\'sw-blog.detail.labelActive\')" v-model:value="blog.active" name="active"/>\n\n				</sw-card>\n			</sw-card-view>\n		</template>\n	</sw-page>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[a.getByName("placeholder"),a.getByName("notification"),a.getByName("discard-detail-page-changes")("blogCategory")],data(){return{blog:null,blogCategory:null,product:null,blogRepository:null,blogCategoryRepository:null,productRepository:null,isLoading:!1,processSuccess:!1,blogCategoryOptions:null}},props:{blogId:{type:String,required:!1,default:null}},watch:{blogId(){this.createdComponent()}},metaInfo(){return{title:this.$createTitle()}},created(){this.createdComponent()},methods:{createdComponent(){if(this.blogRepository=this.repositoryFactory.create("blog"),this.blogCategoryRepository=this.repositoryFactory.create("blog_category"),this.productRepository=this.repositoryFactory.create("product"),this.getBlogCategory(),this.getProduct(),this.blogId){this.getBlog();return}Shopware.State.commit("context/resetLanguageToDefault"),this.blog=this.blogRepository.create()},getBlog(){let e=new l;e.addAssociation("blogCategories"),e.addAssociation("products"),this.blogRepository.get(this.$route.params.id,Shopware.Context.api,e).then(e=>{this.blog=e})},getBlogCategory(){this.blogCategoryRepository.search(new l,Shopware.Context.api).then(e=>{this.blogCategoryOptions=e})},getProduct(){this.productRepository.search(new l,Shopware.Context.api).then(e=>{this.product=e})},abortOnLanguageChange(){return this.blogRepository.hasChanges(this.blog)},saveOnLanguageChange(){return this.onClickSave()},onChangeLanguage(e){this.isLoading=!0,Shopware.State.commit("context/setApiLanguageId",e),this.getBlog(),this.getBlogCategory(),this.getProduct()},onClickSave(){this.isLoading=!0,this.blogRepository.save(this.blog).then(()=>{if(this.isLoading=!1,this.processSuccess=!0,this.createNotificationSuccess({title:this.$tc("sw-blog.detail.titleSaveSuccess"),message:this.$tc("sw-blog.detail.messageSaveSuccess",0,{name:this.blog.name})}),null===this.blogId){this.$router.push({name:"sw.blog.detail",params:{id:this.blog.id}});return}this.getBlog()}).catch(e=>{this.isLoading=!1,this.createNotificationError({title:"sw-blog.general.somethingWentWrong",message:e})})},saveFinish(){this.processSuccess=!1}}}}}]);